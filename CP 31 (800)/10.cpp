// Problem Link - 
/* Created By: 
 *   Ujjwal Bharti
 */
/*   ⠀⢀⣴⣶⣶⣆⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣴⣤⣶⣶⣶⣶⣦⣶⣾⣿⣿⣷⣾⣿⣿⣿⣿⣶⡦⣀⠀⠀⠀⣠⠤⣤⡆
⠀⠀⠀⠀⠀⠀⣿⡆⣠⣿⣿⣿⡏⣿⣴⣿⣿⣿⣶⣆⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣸⣁⣀⣿
⠀⠀⠀⠀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣯⢿⣿⣿⣧⡙⣾⣿
⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟
⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣷
⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⡄
⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⠀⠀⠀⠀⠀⠀⠀
⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁⠂⠀⠀⠀⠀⠀⠀⠀
⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣷⣆⡀⠀⠀⠀
⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢦⡀⠀
⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡁⠀
⠀⠀⠀⠘⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠻⠟⡛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀
⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⢋⠛⠉⠀⠘⠇⠀⠀⠀⠀⡼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀
⠀⠀⠀⠀⠀⢙⡾⢭⣽⣿⣿⡿⠿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀
⠀⠀⠀⠀⠀⡼⠒⠋⠉⠉⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀
⠀⠀⠀⠀⠸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⣷⣌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠐⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣸⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀
⠀⠀⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠐⠀⠀⠀⠀⠀⠐⠦⢐⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀
⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠙⠛⠙⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀
⠀⠀⢠⣾⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⢀⣠⣤⣴⣾⣿⣷⣶⣦⣤⣤⣀⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀
⠀⠀⠸⣿⣿⣧⡄⠀⠀⠀⠀⠀⢀⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠻⠿⣿⣿⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⠛⢿⣿⣿⡟⠀⠀⠀
⠀⠀⠀⠻⣿⣿⣿⣶⣤⣄⢢⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⣤⡀⠀⠀⠀⠀⠘⠛⠷⢀⠀⠀⠀⠀⠀⠀⠁⣺⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⢁⡴⠋⠉⠙⢧⡙⣿⡇⠀⠀⠀
⠀⠀⠀⠶⡿⣿⢻⣿⣿⣿⡖⠸⣿⡿⠛⣣⣖⣿⣿⣿⢿⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣿⣿⣿⣿⣿⣿⡿⠃⠀⣰⡿⠀⠀⠀⠀⣀⣷⢸⠇⠀⠀⠀
⠀⠀⠀⠀⢠⣾⣦⣿⣿⣿⠃⠀⠹⣷⣾⣿⣿⣿⣿⣁⠀⠘⣿⣿⣿⣿⣿⣿⣷⣄⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡿⣿⣿⣿⣿⡟⢀⠀⢀⣿⣷⣷⠟⠙⠻⠿⠛⣸⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢻⣿⢿⣿⠏⠀⠀⠀⠙⣿⣿⣿⣿⣿⡋⠉⠋⠋⠉⠉⣻⣿⠏⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡧⣿⣿⣿⣿⡏⠹⣷⢸⣿⣿⣧⠀⠀⡀⠀⢰⡟⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡞⣻⣿⠏⠀⠀⠀⠀⠀⠈⠙⠿⢿⣿⣿⣷⣤⣄⣴⣾⣿⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠋⠀⠀⣿⠈⢟⣾⠿⠋⢠⣷⢀⡿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢸⡇⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⢋⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣿⣿⣿⣿⣿⠀⢠⣴⣿⣴⠟⠁⠀⣠⣾⠋⣼⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢸⣿⠏⠀⠀⠀⠀⠀⠀⠄⠀⢠⣤⡀⠀⠀⠈⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⣿⣿⣿⣿⣿⣷⠀⣾⠿⠟⢀⣠⣤⠾⠟⢁⣾⣿⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⣯⡀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢏⡷⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠀⣸⣿⣿⣿⣿⡷⢸⠛⠀⣴⢿⣿⡇⠀⣰⣿⣿⡯⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠘⣿⣌⢻⣿⣷⣶⣦⣄⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⡀⠀⠀⣾⣶⣿⣿⣿⣿⣿⡅⢸⡄⠀⠀⠀⠀⢀⣼⡿⠵⣽⣗⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢿⣹⣾⣿⣽⣿⣿⣿⣷⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⣄⣿⣿⣿⣿⣿⣿⣿⣿⣼⣷⣄⣀⣠⣴⣿⣿⣧⠇⣿⣿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠽⢁⣰⣿⣷⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⠩⠟⣻⢿⣿⣿⣍⢐⣿⣿⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⢃⣦⡄⠀⠀⠀⠀⠈⡀⠠⠀⢀⣶⣴⣶⣾⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣄⣡⣾⣾⣿⣿⣷⣿⣿⣿⣧⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣦⡀⠀⣀⠐⠁⠂⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣦⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣀⡀⠀
⠀⠀⠀⠀⠀⠀⢻⣿⣷⣿⣜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠐⢄⣶⣻⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣋⡼
⠀⠀⠀⠀⠀⠀⣼⣡⣿⢻⣿⣿⣿⣿⣿⣿⠟⠿⣿⣿⣿⣿⣿⣧⣤⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡄⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⢿⣿
⠀⠀⠀⠀⠀⠀⣿⣧⣦⣤⣤⣬⣭⡭⡉⠀⠀⠀⣽⢻⣿⣿⣿⣿⣿⣬⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣅⠇⠀⠀⠻⣿⣿⣿⣿⡽⣿⡵⣻⣷⣿⣿⡿⣞
⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣤⣤⣶⣿⢋⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡻⠀⠀⢠⣴⣿⢟⣽⣿⣿⣿⣾⣵⣿⣾⣿⣿⣽
⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⡿⣻⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣀⣴⣿⣿⣿⣿⣿⣟⣽⣫⣿⣿⣿⣿⡽⣻⡿
⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣾⣿⢿⡵⣿⣻⣿⣿⣿⣿⣿⣷⡯⣿⣿⣿⣕⣯
⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣻⣿⣝⡿⣻⣿⣿⣿⣿⣿⣾⡿⣟⡿⢿⣻
⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⣻⣿⣾⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣷⣯⡶⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠉⠙⢶⡙⡣⠙⠫⣿⡸⢿⣻⣿⣿⣿⣿⣿⣿⣿⣾⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡯⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⠿⠿⠿⢿⠟⠛⠟⠙⠋⠀⠀⠀⠀⠀⠳⣄⠀⠄⠁⠐⡭⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡛⠉⠈⠙⠻⠎⢡
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣦⠄⠀⠂⢽⢭⣿⣿⣿⣿⣿⣿⣟⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⡻⣗⣶⣤⣤⣀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡄⡇⠄⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣦⣤⣤⣶⣤
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣸⡐⣢⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣛⣛⣛⣛
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣽⣿⣿⣭⣿⣿⢯⣻⣝
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡿⣫⣿⣿⣿⠟⣻⣿⣾⣿⣷⣾⣿⣿⣿⣿⣿⣿⣟⣫⣽
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣷⣿⣿⣿⣿⣿⢟⣿⣿⣿⣿⡿⢣⣾⣟⣴⢿⠉⣿⣿⣽⣿⡿⣖⢾⢻⣽⣮⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣟⣵⣿⣯⣸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⢿⣿⣿⣾⣾⣿⣿⢿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣏⣿⣿⣿⠿⢿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣩⣿⣿⣿⣟⣻⣿⣿⣿⣯⣿⣿⣿⣻⣽
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣯⣛⣷⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣟⡻⣻⣿⣟⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⣲⣻⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⠛⠉⠚⣿⣛⣉⣿⣿⣿⣿⣿⡿⢿⣿⣿⢿⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⡿⣿⣿⣿⣯⣿⣿⣾⣽⣿⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⠏⣿⠏⣸⢑⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢯⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣻
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣶⣿⣼⣿⣿⣿⣟⣟⣹⣿⣿⣟⣿⣿⣿⣿⣟⣩⣗⣿⣿⡿⢿⣿⢿⣷⣻⣾⣿⣿⣷⣷⣿⣿⣿⣿⣿⢿⣷⣚
*/
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <cstdint>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/trie_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ll              long long int
#define ld              long double
#define mod             1000000007
#define inf             1e18
#define pb              push_back
#define vi              vector<ll>
#define vs              vector<string>
#define pii             pair<ll , ll>
#define ump             unordered_map
#define mp              make_pair
#define pq_max          priority_queue<ll>
#define pq_min          priority_queue<ll,vi,greater<ll> >
#define all(n)          n.begin(),n.end()
#define ff              first
#define ss              second
#define mid(l,r)        (l+(r-l)/2)
#define bitc(n)         __builtin_popcount(n)
#define loop(i,a,b)     for(int i=(a);i<=(b);i++)
#define looprev(i,a,b)  for(int i=(a);i>=(b);i--)
#define iter(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define log(args...)    { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#define logarr(arr,a,b) for(int z=(a);z<=(b);z++) cout<<(arr[z])   ;cout<<endl;
 
 
 
 
void file_i_o(){
      ios_base::sync_with_stdio(0);
         cin.tie(0);
         cout.tie(0);
}
 
 
 void solve(){
          vector<vector<char>> grid(10,vector<char>(10));

          loop(i,0,9){
            loop(j,0,9){
                cin>>grid[i][j];
            }
          }
               int ans=0;

               // for border row column
               loop(i,0,0){
                loop(j,0,9){
                     if(grid[i][j]=='X'){
                        ans+=1;
                     }
                }
               }
                loop(i,1,9){
                loop(j,9,9){
                     if(grid[i][j]=='X'){
                        ans+=1;
                     }
                }
               }
                loop(i,9,9){
                looprev(j,8,0){
                     if(grid[i][j]=='X'){
                        ans+=1;
                     }
                }
               }
                looprev(i,8,1){
                loop(j,0,0){
                     if(grid[i][j]=='X'){
                        ans+=1;
                     }
                }
               }
               // for second inner border column
                loop(i,1,1){
                loop(j,1,8){
                     if(grid[i][j]=='X'){
                        ans+=2;
                     }
                }
               }
                loop(i,2,8){
                loop(j,8,8){
                     if(grid[i][j]=='X'){
                        ans+=2;
                     }
                }
               }
                loop(i,8,8){
                looprev(j,7,1){
                     if(grid[i][j]=='X'){
                        ans+=2;
                     }
                }
               }
                looprev(i,7,2){
                loop(j,1,1){
                     if(grid[i][j]=='X'){
                        ans+=2;
                     }
                }
               }
               // for third inner border column
                 loop(i,2,2){
                loop(j,2,7){
                     if(grid[i][j]=='X'){
                        ans+=3;
                     }
                }
               }
                loop(i,3,7){
                loop(j,7,7){
                     if(grid[i][j]=='X'){
                        ans+=3;
                     }
                }
               }
                loop(i,7,7){
                looprev(j,6,2){
                     if(grid[i][j]=='X'){
                        ans+=3;
                     }
                }
               }
                looprev(i,6,3){
                loop(j,2,2){
                     if(grid[i][j]=='X'){
                        ans+=3;
                     }
                }
               }

               // for fourth inner border column 
                loop(i,3,3){
                loop(j,3,6){
                     if(grid[i][j]=='X'){
                        ans+=4;
                     }
                }
               }
                loop(i,4,6){
                loop(j,6,6){
                     if(grid[i][j]=='X'){
                        ans+=4;
                     }
                }
               }
                loop(i,6,6){
                looprev(j,5,3){
                     if(grid[i][j]=='X'){
                        ans+=4;
                     }
                }
               }
                looprev(i,5,4){
                loop(j,3,3){
                     if(grid[i][j]=='X'){
                        ans+=4;
                     }
                }
               }
               // for middle box
                if(grid[4][4]=='X') ans+=5;
                if(grid[4][5]=='X') ans+=5;
                if(grid[5][4]=='X') ans+=5;
                if(grid[5][5]=='X') ans+=5;

                cout<<ans<<"\n";
}
int main() {
      file_i_o();
// Write your code here....
                 int t;
                 cin>>t;
                 while(t--){
                    solve();
                 }
return 0;
}